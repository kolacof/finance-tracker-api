{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { transaction } from '../../models/transaction';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport Swal from 'sweetalert2';\nlet UpdateTransactionComponent = class UpdateTransactionComponent {\n  constructor(transactionService, categoryService, router, route, spinner) {\n    this.transactionService = transactionService;\n    this.categoryService = categoryService;\n    this.router = router;\n    this.route = route;\n    this.spinner = spinner;\n    this.transaction = new transaction();\n    this.formtransaction = new FormGroup({\n      'type': new FormControl(this.transaction.type, Validators.required),\n      'amount': new FormControl(this.transaction.amount, Validators.required),\n      'categoryName': new FormControl(this.transaction.categoryName, Validators.required),\n      'categoryId': new FormControl(this.transaction.categoryId),\n      'date': new FormControl(this.transaction.date, Validators.required),\n      'description': new FormControl(this.transaction.description, Validators.required),\n      'id': new FormControl(0)\n    });\n  }\n  ngOnInit() {\n    this.spinner.show();\n    this.idtransaction = this.route.snapshot.params[\"id\"];\n    this.loadTransaction();\n  }\n  loadTransaction() {\n    this.transactionService.seeTransaction(this.idtransaction).subscribe({\n      next: res => {\n        this.transaction = res;\n      },\n      error: errorData => {\n        Swal.fire({\n          title: \"Error\",\n          text: \"No se pudo cargar la informacion de la transaccion\",\n          icon: \"error\",\n          confirmButtonColor: '#007B3E'\n        });\n      },\n      complete: () => {\n        this.loadCategories();\n        this.actualizarFormulario();\n      }\n    });\n  }\n  loadCategories() {\n    this.categoryService.listCategories().subscribe({\n      next: res => {\n        this.categories = res;\n      },\n      error: errorData => {\n        Swal.fire({\n          title: \"Error\",\n          text: \"No se pudieron cargar las categorias existentes\",\n          icon: \"error\",\n          confirmButtonColor: '#007B3E'\n        });\n      },\n      complete: () => {\n        this.spinner.hide();\n      }\n    });\n  }\n  actualizarFormulario() {\n    this.formtransaction.get(\"type\")?.setValue(this.transaction.type);\n    this.formtransaction.get(\"amount\")?.setValue(this.transaction.amount);\n    this.formtransaction.get(\"categoryName\")?.setValue(this.transaction.categoryName);\n    this.formtransaction.get(\"categoryId\")?.setValue(this.transaction.categoryId);\n    this.formtransaction.get(\"date\")?.setValue(this.transaction.date);\n    this.formtransaction.get(\"description\")?.setValue(this.transaction.description);\n    this.formtransaction.get(\"id\")?.setValue(this.transaction.id);\n    console.log(this.formtransaction.value);\n  }\n  get type() {\n    return this.formtransaction.get('type');\n  }\n  get amount() {\n    return this.formtransaction.get('amount');\n  }\n  get categoryName() {\n    return this.formtransaction.get('categoryName');\n  }\n  get date() {\n    return this.formtransaction.get('date');\n  }\n  backToList() {\n    this.router.navigate([\"/dashboard/listTransactions\"]);\n  }\n  updateTransaction() {\n    Swal.fire({\n      title: '¿Estás seguro?',\n      text: \"Confirma si deseas editar la transacción\",\n      icon: 'question',\n      showCancelButton: true,\n      confirmButtonColor: '#007B3E',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Si , crear',\n      cancelButtonText: 'No, cancelar',\n      reverseButtons: true,\n      buttonsStyling: true\n    }).then(result => {\n      if (result.isConfirmed) {\n        if (this.formtransaction.valid) {\n          var idcategory = this.formtransaction.get('categoryName')?.value;\n          this.formtransaction.get('categoryId')?.setValue(idcategory);\n          this.formtransaction.get('id')?.setValue(this.idtransaction);\n          this.transactionService.updateTransaction(this.idtransaction, this.formtransaction.value).subscribe({\n            next: res => {},\n            error: errorData => {\n              alert(\"Error al editar la transacción\");\n            },\n            complete: () => {\n              alert(\"Transacción editada\");\n            }\n          });\n        } else {\n          this.formtransaction.markAllAsTouched();\n          Swal.fire({\n            title: \"Error\",\n            text: \"Debes llenar todos los capos obligatorios\",\n            icon: \"warning\",\n            confirmButtonColor: '#007B3E'\n          });\n        }\n      }\n    });\n  }\n};\nUpdateTransactionComponent = __decorate([Component({\n  selector: 'app-update-transaction',\n  templateUrl: './update-transaction.component.html',\n  styleUrls: ['./update-transaction.component.css']\n})], UpdateTransactionComponent);\nexport { UpdateTransactionComponent };","map":{"version":3,"mappings":"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","names":["Component","transaction","FormControl","FormGroup","Validators","Swal","UpdateTransactionComponent","constructor","transactionService","categoryService","router","route","spinner","type","required","amount","categoryName","categoryId","date","description","ngOnInit","show","idtransaction","snapshot","params","loadTransaction","seeTransaction","subscribe","next","res","error","errorData","fire","title","text","icon","confirmButtonColor","complete","loadCategories","actualizarFormulario","listCategories","categories","hide","formtransaction","get","setValue","id","console","log","value","backToList","navigate","updateTransaction","showCancelButton","cancelButtonColor","confirmButtonText","cancelButtonText","reverseButtons","buttonsStyling","then","result","isConfirmed","valid","idcategory","alert","markAllAsTouched","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\Documentos\\Desarrollo\\pruebas\\Finance Tracker\\Finance-Tracker-frontend\\src\\app\\admin\\components\\update-transaction\\update-transaction.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { transaction } from '../../models/transaction';\nimport { TransactionService } from '../../services/transaction.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { category } from '../../models/category';\nimport { CategoryoService } from '../../services/category.service';\nimport Swal from 'sweetalert2';\nimport { NgxSpinnerService } from 'ngx-spinner';\n\n@Component({\n  selector: 'app-update-transaction',\n  templateUrl: './update-transaction.component.html',\n  styleUrls: ['./update-transaction.component.css']\n})\nexport class UpdateTransactionComponent {\n  categories:category[];\n  idtransaction:number;\n  transaction:transaction= new transaction();\n  constructor(private transactionService:TransactionService, private categoryService:CategoryoService, private router:Router, private route:ActivatedRoute, private spinner:NgxSpinnerService){}\n  \n  ngOnInit(): void {\n    this.spinner.show();\n    this.idtransaction= this.route.snapshot.params[\"id\"];\n    this.loadTransaction();\n  }\n\n  loadTransaction(){\n    this.transactionService.seeTransaction(this.idtransaction).subscribe({\n      next:(res)=>{\n        this.transaction=res;\n      },\n      error: (errorData)=> {\n        Swal.fire({\n          title: \"Error\",\n          text: \"No se pudo cargar la informacion de la transaccion\",\n          icon: \"error\",\n          confirmButtonColor: '#007B3E'\n        });\n      },\n      complete: () => {\n        this.loadCategories();\n        this.actualizarFormulario();\n      }\n    });\n  }\n\n  loadCategories(){\n    this.categoryService.listCategories().subscribe({\n      next:(res)=>{\n        this.categories=res;\n      },\n      error:(errorData)=>{\n        Swal.fire({\n          title: \"Error\",\n          text: \"No se pudieron cargar las categorias existentes\",\n          icon: \"error\",\n          confirmButtonColor: '#007B3E'\n        });\n      },\n      complete:()=>{\n        this.spinner.hide();\n      }\n    });\n  }\n\n  \n  formtransaction= new FormGroup({\n      'type': new FormControl(this.transaction.type, Validators.required),\n      'amount': new FormControl(this.transaction.amount, Validators.required),\n      'categoryName': new FormControl(this.transaction.categoryName, Validators.required),\n      'categoryId': new FormControl(this.transaction.categoryId),\n      'date': new FormControl(this.transaction.date, Validators.required),\n      'description': new FormControl(this.transaction.description, Validators.required),\n      'id': new FormControl(0)\n  });\n\n  actualizarFormulario(){\n    this.formtransaction.get(\"type\")?.setValue(this.transaction.type);\n    this.formtransaction.get(\"amount\")?.setValue(this.transaction.amount);\n    this.formtransaction.get(\"categoryName\")?.setValue(this.transaction.categoryName);\n    this.formtransaction.get(\"categoryId\")?.setValue(this.transaction.categoryId);\n    this.formtransaction.get(\"date\")?.setValue(this.transaction.date);\n    this.formtransaction.get(\"description\")?.setValue(this.transaction.description);\n    this.formtransaction.get(\"id\")?.setValue(this.transaction.id);\n    console.log(this.formtransaction.value);\n  }\n\n  get type() {\n    return this.formtransaction.get('type') as FormControl;\n  }\n\n  get amount() {\n    return this.formtransaction.get('amount') as FormControl;\n  }\n\n  get categoryName() {\n    return this.formtransaction.get('categoryName') as FormControl;\n  }\n\n  get date() {\n    return this.formtransaction.get('date') as FormControl;\n  }\n\n\n  backToList(){\n    this.router.navigate([\"/dashboard/listTransactions\"]);\n  }\n\n  updateTransaction(){\n    Swal.fire({\n      title: '¿Estás seguro?',\n      text: \"Confirma si deseas editar la transacción\",\n      icon: 'question',\n      showCancelButton: true,\n      confirmButtonColor: '#007B3E',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Si , crear',\n      cancelButtonText: 'No, cancelar',\n      reverseButtons: true,\n      buttonsStyling: true\n    }).then((result) => {\n      if (result.isConfirmed) {\n        if(this.formtransaction.valid){\n          var idcategory:any = this.formtransaction.get('categoryName')?.value;\n          this.formtransaction.get('categoryId')?.setValue(idcategory);\n          this.formtransaction.get('id')?.setValue(this.idtransaction);\n          this.transactionService.updateTransaction(this.idtransaction, this.formtransaction.value).subscribe({\n            next:(res)=>{\n            },\n            error:(errorData)=>{\n              alert(\"Error al editar la transacción\")\n            },\n            complete:()=>{\n              alert(\"Transacción editada\");\n            }\n          });\n        }\n        else{\n          this.formtransaction.markAllAsTouched();\n          Swal.fire({\n            title: \"Error\",\n            text: \"Debes llenar todos los capos obligatorios\",\n            icon: \"warning\",\n            confirmButtonColor: '#007B3E'\n          });\n        }\n      }});\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}