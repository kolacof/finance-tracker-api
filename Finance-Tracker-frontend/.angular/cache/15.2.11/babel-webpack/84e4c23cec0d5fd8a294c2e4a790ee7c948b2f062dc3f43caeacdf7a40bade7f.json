{"ast":null,"code":"import { transaction } from '../../models/transaction';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/transaction.service\";\nimport * as i2 from \"../../services/category.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nfunction UpdateTransactionComponent_option_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const category_r1 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate(\"value\", category_r1.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(category_r1.name);\n  }\n}\nexport class UpdateTransactionComponent {\n  constructor(transactionService, categoryService, router, route) {\n    this.transactionService = transactionService;\n    this.categoryService = categoryService;\n    this.router = router;\n    this.route = route;\n    this.transaction = new transaction();\n    this.formtransaction = new FormGroup({\n      'type': new FormControl(this.transaction.type, Validators.required),\n      'amount': new FormControl(this.transaction.amount, Validators.required),\n      'categoryName': new FormControl(this.transaction.categoryName, Validators.required),\n      'categoryId': new FormControl(this.transaction.categoryId),\n      'date': new FormControl(this.transaction.date, Validators.required),\n      'description': new FormControl(this.transaction.description, Validators.required),\n      'id': new FormControl(0)\n    });\n  }\n  ngOnInit() {\n    this.idtransaction = this.route.snapshot.params[\"id\"];\n    this.loadTransaction();\n  }\n  loadTransaction() {\n    this.transactionService.seeTransaction(this.idtransaction).subscribe({\n      next: res => {\n        this.transaction = res;\n        this.loadCategories();\n        this.actualizarFormulario();\n      },\n      error: errorData => {\n        alert(\"Error al carga la información de la transacción\");\n      },\n      complete: () => {\n        alert(\"Datos cargados\");\n      }\n    });\n  }\n  loadCategories() {\n    this.categoryService.listCategories().subscribe({\n      next: res => {\n        this.categories = res;\n      },\n      error: errorData => {\n        alert(\"Error al registrar la transaccion\");\n      },\n      complete: () => {\n        alert(\"categorias Importadas\");\n      }\n    });\n  }\n  actualizarFormulario() {\n    this.formtransaction.get(\"type\")?.setValue(this.transaction.type);\n    this.formtransaction.get(\"amount\")?.setValue(this.transaction.amount);\n    this.formtransaction.get(\"categoryName\")?.setValue(this.transaction.categoryName);\n    this.formtransaction.get(\"categoryId\")?.setValue(this.transaction.categoryId);\n    this.formtransaction.get(\"date\")?.setValue(this.transaction.date);\n    this.formtransaction.get(\"description\")?.setValue(this.transaction.description);\n    this.formtransaction.get(\"id\")?.setValue(this.transaction.id);\n    console.log(this.formtransaction.value);\n  }\n  backToList() {\n    this.router.navigate([\"/dashboard/listTransactions\"]);\n  }\n  updateTransaction() {\n    Swal.fire({\n      title: '¿Estás seguro?',\n      text: \"Confirma si deseas editar la transacción\",\n      icon: 'question',\n      showCancelButton: true,\n      confirmButtonColor: '#007B3E',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Si , crear',\n      cancelButtonText: 'No, cancelar',\n      reverseButtons: true,\n      buttonsStyling: true\n    }).then(result => {\n      if (result.isConfirmed) {\n        if (this.formtransaction.valid) {\n          var idcategory = this.formtransaction.get('categoryName')?.value;\n          this.formtransaction.get('categoryId')?.setValue(idcategory);\n          this.formtransaction.get('id')?.setValue(this.idtransaction);\n          this.transactionService.updateTransaction(this.idtransaction, this.formtransaction.value).subscribe({\n            next: res => {},\n            error: errorData => {\n              alert(\"Error al editar la transacción\");\n            },\n            complete: () => {\n              alert(\"Transacción editada\");\n            }\n          });\n        } else {\n          this.formtransaction.markAllAsTouched();\n          Swal.fire({\n            title: \"Error\",\n            text: \"Debes llenar todos los capos obligatorios\",\n            icon: \"warning\",\n            confirmButtonColor: '#007B3E'\n          });\n        }\n      }\n    });\n  }\n  static #_ = this.ɵfac = function UpdateTransactionComponent_Factory(t) {\n    return new (t || UpdateTransactionComponent)(i0.ɵɵdirectiveInject(i1.TransactionService), i0.ɵɵdirectiveInject(i2.CategoryoService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UpdateTransactionComponent,\n    selectors: [[\"app-update-transaction\"]],\n    decls: 31,\n    vars: 3,\n    consts: [[1, \"titulo\"], [1, \"text-center\"], [3, \"formGroup\"], [1, \"container\", \"row\"], [1, \"form-group\", \"col-md-6\"], [\"for\", \"nombre\"], [\"type\", \"text\", \"formControlName\", \"type\", 1, \"form-control\"], [\"for\", \"url\"], [\"type\", \"text\", \"formControlName\", \"amount\", 1, \"form-control\"], [\"for\", \"descripcion\"], [\"formControlName\", \"categoryName\", 1, \"form-select\", \"modal__input\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"fecha\"], [\"type\", \"date\", \"formControlName\", \"date\", 1, \"form-control\"], [\"for\", \"\"], [\"type\", \"text\", \"formControlName\", \"description\", 1, \"form-control\"], [1, \"buttons\", \"form-group\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"btn\", \"btn-success\", 3, \"click\"], [3, \"value\"]],\n    template: function UpdateTransactionComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\", 1);\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(3, \"form\", 2)(4, \"div\", 3)(5, \"div\", 4)(6, \"label\", 5);\n        i0.ɵɵtext(7, \"Tipo de transacci\\u00F3n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"input\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 4)(10, \"label\", 7);\n        i0.ɵɵtext(11, \"Cantidad\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"input\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\", 4)(14, \"label\", 9);\n        i0.ɵɵtext(15, \"Categor\\u00EDa:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"select\", 10);\n        i0.ɵɵtemplate(17, UpdateTransactionComponent_option_17_Template, 2, 2, \"option\", 11);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(18, \"div\", 4)(19, \"label\", 12);\n        i0.ɵɵtext(20, \"Fecha de transacci\\u00F3n:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(21, \"input\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"div\", 4)(23, \"label\", 14);\n        i0.ɵɵtext(24, \"Descripci\\u00F3n:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(25, \"input\", 15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"div\", 16)(27, \"button\", 17);\n        i0.ɵɵlistener(\"click\", function UpdateTransactionComponent_Template_button_click_27_listener() {\n          return ctx.backToList();\n        });\n        i0.ɵɵtext(28, \"Volver\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"button\", 18);\n        i0.ɵɵlistener(\"click\", function UpdateTransactionComponent_Template_button_click_29_listener() {\n          return ctx.updateTransaction();\n        });\n        i0.ɵɵtext(30, \"Editar\");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"transacci\\u00F3n numero \", ctx.idtransaction, \"\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.formtransaction);\n        i0.ɵɵadvance(14);\n        i0.ɵɵproperty(\"ngForOf\", ctx.categories);\n      }\n    },\n    dependencies: [i4.NgForOf, i5.ɵNgNoValidate, i5.NgSelectOption, i5.ɵNgSelectMultipleOption, i5.DefaultValueAccessor, i5.SelectControlValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.FormGroupDirective, i5.FormControlName],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["transaction","FormControl","FormGroup","Validators","Swal","i0","UpdateTransactionComponent","constructor","transactionService","categoryService","router","route","type","required","amount","categoryName","categoryId","date","description","ngOnInit","idtransaction","snapshot","params","loadTransaction","seeTransaction","subscribe","next","res","loadCategories","actualizarFormulario","error","errorData","alert","complete","listCategories","categories","formtransaction","get","setValue","id","console","log","value","backToList","navigate","updateTransaction","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","reverseButtons","buttonsStyling","then","result","isConfirmed","valid","idcategory","markAllAsTouched","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\Documentos\\Desarrollo\\pruebas\\Finance Tracker\\Finance-Tracker-frontend\\src\\app\\admin\\components\\update-transaction\\update-transaction.component.ts","D:\\Documentos\\Desarrollo\\pruebas\\Finance Tracker\\Finance-Tracker-frontend\\src\\app\\admin\\components\\update-transaction\\update-transaction.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { transaction } from '../../models/transaction';\nimport { TransactionService } from '../../services/transaction.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { category } from '../../models/category';\nimport { CategoryoService } from '../../services/category.service';\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-update-transaction',\n  templateUrl: './update-transaction.component.html',\n  styleUrls: ['./update-transaction.component.css']\n})\nexport class UpdateTransactionComponent {\n  categories:category[];\n  idtransaction:number;\n  transaction:transaction= new transaction();\n  constructor(private transactionService:TransactionService, private categoryService:CategoryoService, private router:Router, private route:ActivatedRoute){}\n  \n  ngOnInit(): void {\n    this.idtransaction= this.route.snapshot.params[\"id\"];\n    this.loadTransaction();\n  }\n\n  loadTransaction(){\n    this.transactionService.seeTransaction(this.idtransaction).subscribe({\n      next:(res)=>{\n        this.transaction=res;\n        this.loadCategories();\n        this.actualizarFormulario();\n      },\n      error: (errorData)=> {\n        alert(\"Error al carga la información de la transacción\");\n      },\n      complete: () => {\n        \n        alert(\"Datos cargados\");\n      }\n    });\n  }\n\n  loadCategories(){\n    this.categoryService.listCategories().subscribe({\n      next:(res)=>{\n        this.categories=res;\n      },\n      error:(errorData)=>{\n        alert(\"Error al registrar la transaccion\")\n      },\n      complete:()=>{\n        alert(\"categorias Importadas\");\n      \n      }\n    });\n  }\n\n  \n  formtransaction= new FormGroup({\n      'type': new FormControl(this.transaction.type, Validators.required),\n      'amount': new FormControl(this.transaction.amount, Validators.required),\n      'categoryName': new FormControl(this.transaction.categoryName, Validators.required),\n      'categoryId': new FormControl(this.transaction.categoryId),\n      'date': new FormControl(this.transaction.date, Validators.required),\n      'description': new FormControl(this.transaction.description, Validators.required),\n      'id': new FormControl(0)\n  });\n\n  actualizarFormulario(){\n    this.formtransaction.get(\"type\")?.setValue(this.transaction.type);\n    this.formtransaction.get(\"amount\")?.setValue(this.transaction.amount);\n    this.formtransaction.get(\"categoryName\")?.setValue(this.transaction.categoryName);\n    this.formtransaction.get(\"categoryId\")?.setValue(this.transaction.categoryId);\n    this.formtransaction.get(\"date\")?.setValue(this.transaction.date);\n    this.formtransaction.get(\"description\")?.setValue(this.transaction.description);\n    this.formtransaction.get(\"id\")?.setValue(this.transaction.id);\n    console.log(this.formtransaction.value);\n  }\n\n\n  backToList(){\n    this.router.navigate([\"/dashboard/listTransactions\"]);\n  }\n\n  updateTransaction(){\n    Swal.fire({\n      title: '¿Estás seguro?',\n      text: \"Confirma si deseas editar la transacción\",\n      icon: 'question',\n      showCancelButton: true,\n      confirmButtonColor: '#007B3E',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Si , crear',\n      cancelButtonText: 'No, cancelar',\n      reverseButtons: true,\n      buttonsStyling: true\n    }).then((result) => {\n      if (result.isConfirmed) {\n        if(this.formtransaction.valid){\n          var idcategory:any = this.formtransaction.get('categoryName')?.value;\n          this.formtransaction.get('categoryId')?.setValue(idcategory);\n          this.formtransaction.get('id')?.setValue(this.idtransaction);\n          this.transactionService.updateTransaction(this.idtransaction, this.formtransaction.value).subscribe({\n            next:(res)=>{\n            },\n            error:(errorData)=>{\n              alert(\"Error al editar la transacción\")\n            },\n            complete:()=>{\n              alert(\"Transacción editada\");\n            }\n          });\n        }\n        else{\n          this.formtransaction.markAllAsTouched();\n          Swal.fire({\n            title: \"Error\",\n            text: \"Debes llenar todos los capos obligatorios\",\n            icon: \"warning\",\n            confirmButtonColor: '#007B3E'\n          });\n        }\n      }});\n  }\n}\n","<div class=\"titulo\">\n    <h2 class=\"text-center\">transacción numero {{idtransaction}}</h2>\n</div>\n\n<form [formGroup]=\"formtransaction\">\n    <div class=\"container row\">\n        <div class=\"form-group col-md-6\">\n            <label for=\"nombre\">Tipo de transacción</label>\n            <input class=\"form-control\" type=\"text\" formControlName=\"type\">\n        </div>\n    \n        <div class=\"form-group col-md-6\">\n            <label for=\"url\">Cantidad</label>\n            <input class=\"form-control\" type=\"text\" formControlName=\"amount\">\n        </div>\n    \n        <div class=\"form-group col-md-6\">\n            <label for=\"descripcion\">Categoría:</label>\n            <select  class=\"form-select modal__input\" formControlName=\"categoryName\">\n                <option *ngFor=\"let category of categories\" value={{category.id}}>{{category.name}}</option>\n            <!--   <div class=\"alert alert-danger\" *ngIf=\"email.invalid && (email.dirty || email.touched)\">\n                <div *ngIf=\"email.errors?.['minlength']\">\n                    Digite su email por favor\n                </div>\n                <div *ngIf=\"email.errors?.['pattern']\">\n                    Por favor digite el email con el siguiente formato : user100@gmail.com\n                </div>\n            </div>-->\n            </select>\n        </div>\n    \n        <div class=\"form-group col-md-6\">\n            <label for=\"fecha\">Fecha de transacción:</label>\n            <input class=\"form-control\" type=\"date\" formControlName=\"date\">\n        </div>\n    \n        <div class=\"form-group col-md-6\">\n            <label for=\"\">Descripción:</label>\n            <input class=\"form-control\" type=\"text\"  formControlName=\"description\">\n        </div>\n        <div class=\"buttons form-group\">\n            <button (click)=\"backToList()\" class=\"btn btn-primary\">Volver</button>\n            <button (click)=\"updateTransaction()\" class=\"btn btn-success\">Editar</button>\n        </div>\n    </div>\n</form>\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}