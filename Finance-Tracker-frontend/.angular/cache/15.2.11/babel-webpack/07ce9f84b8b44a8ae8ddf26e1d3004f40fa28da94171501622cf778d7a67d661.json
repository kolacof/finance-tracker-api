{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { transaction } from '../../models/transaction';\nimport DataTable from 'datatables.net-dt';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport Swal from 'sweetalert2';\nlet TransactionsListComponent = class TransactionsListComponent {\n  constructor(transactionService, categoryService, router, spinner) {\n    this.transactionService = transactionService;\n    this.categoryService = categoryService;\n    this.router = router;\n    this.spinner = spinner;\n    this.formtransaction = new FormGroup({\n      'type': new FormControl('', Validators.required),\n      'amount': new FormControl('', [Validators.required, Validators.pattern(/^\\d*\\.?\\d*$/)]),\n      'categoryId': new FormControl(null, Validators.required),\n      'description': new FormControl('', Validators.required),\n      'date': new FormControl(null, Validators.required)\n    });\n    this.transaction = new transaction();\n    this.formtransactionUpdate = new FormGroup({\n      'type': new FormControl(this.transaction.type, Validators.required),\n      'amount': new FormControl(this.transaction.amount, Validators.required),\n      'categoryName': new FormControl(this.transaction.categoryName, Validators.required),\n      'categoryId': new FormControl(this.transaction.categoryId, Validators.required),\n      'date': new FormControl(this.transaction.date, Validators.required),\n      'description': new FormControl(this.transaction.description, Validators.required),\n      'id': new FormControl(0)\n    });\n  }\n  ngOnInit() {\n    this.spinner.show();\n    this.listTransactions();\n  }\n  creteDatatable() {\n    setTimeout(() => {\n      if (this.table) {\n        this.table.destroy();\n      }\n      this.table = new DataTable(\"#tabla_clientes\", {\n        language: {\n          url: '/assets/es-ES.json'\n        },\n        columnDefs: [{\n          targets: \"_all\",\n          className: 'dt-center'\n        }],\n        paging: true,\n        pagingType: 'simple',\n        layout: {\n          topStart: 'div',\n          topEnd: 'pageLength',\n          bottomStart: 'paging',\n          bottomEnd: 'info'\n        }\n      });\n    }, 1);\n  }\n  listTransactions() {\n    this.transactionService.listarTransactions().subscribe({\n      next: res => {\n        this.transactions = res;\n      },\n      error: errorData => {\n        Swal.fire({\n          title: \"Error\",\n          text: \"Error al cargar la lista de transacciones\",\n          icon: \"error\",\n          confirmButtonColor: '#007B3E'\n        });\n        this.spinner.hide();\n      },\n      complete: () => {\n        this.creteDatatable();\n        this.spinner.hide();\n      }\n    });\n  }\n  //ELIMINAR TRANSACCION\n  deleteTransaction(id) {\n    Swal.fire({\n      title: '¿Estás seguro?',\n      text: \"Confirma si deseas eliminar la transacción\",\n      icon: 'question',\n      showCancelButton: true,\n      confirmButtonColor: '#007B3E',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Si , crear',\n      cancelButtonText: 'No, cancelar',\n      reverseButtons: true,\n      buttonsStyling: true\n    }).then(result => {\n      if (result.isConfirmed) {\n        this.spinner.show();\n        this.transactionService.deleteTransaction(id).subscribe({\n          next: res => {},\n          error: errorData => {\n            Swal.fire({\n              title: \"Error\",\n              text: \"Error, no se pudo eliminar la transacción\",\n              icon: \"error\",\n              confirmButtonColor: '#007B3E'\n            });\n          },\n          complete: () => {\n            this.spinner.hide();\n            Swal.fire({\n              title: \"Hecho\",\n              text: \"La transaccion ha sido eliminada\",\n              icon: \"success\",\n              confirmButtonColor: '#007B3E'\n            });\n            this.creteDatatable();\n          }\n        });\n      }\n    });\n  }\n  createTransactionModal() {\n    this.importCategories();\n  }\n  importCategories() {\n    this.spinner.show();\n    this.categoryService.listCategories().subscribe({\n      next: res => {\n        this.categories = res;\n      },\n      error: errorData => {\n        Swal.fire({\n          title: \"Error\",\n          text: \"Error al cargar las categorías\",\n          icon: \"error\",\n          confirmButtonColor: '#007B3E'\n        });\n        this.spinner.hide();\n      },\n      complete: () => {\n        this.spinner.hide();\n      }\n    });\n  }\n  get type() {\n    return this.formtransaction.get('type');\n  }\n  get amount() {\n    return this.formtransaction.get('amount');\n  }\n  get categoryId() {\n    return this.formtransaction.get('categoryId');\n  }\n  get date() {\n    return this.formtransaction.get('date');\n  }\n  createTransaction() {\n    Swal.fire({\n      title: '¿Estás seguro?',\n      text: \"Confirma si deseas registrar la transacción\",\n      icon: 'question',\n      showCancelButton: true,\n      confirmButtonColor: '#007B3E',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Si , crear',\n      cancelButtonText: 'No, cancelar',\n      reverseButtons: true,\n      buttonsStyling: true\n    }).then(result => {\n      if (result.isConfirmed) {\n        if (this.formtransaction.valid) {\n          this.spinner.show();\n          this.transactionService.createTransaction(this.formtransaction.value).subscribe({\n            next: res => {},\n            error: errorData => {\n              Swal.fire({\n                title: \"Error\",\n                text: \"Error al registrar la transacción\",\n                icon: \"error\",\n                confirmButtonColor: '#007B3E'\n              });\n              this.spinner.hide();\n            },\n            complete: () => {\n              this.listTransactions();\n            }\n          });\n        } else {\n          this.formtransaction.markAllAsTouched();\n          Swal.fire({\n            title: \"Error\",\n            text: \"Debes llenar todos los capos obligatorios\",\n            icon: \"warning\",\n            confirmButtonColor: '#007B3E'\n          });\n        }\n      }\n    });\n  }\n  //VER TRANSACCION\n  seeTransactionModal(id) {\n    this.seeTransaction(id);\n  }\n  seeTransaction(id) {\n    this.spinner.show();\n    this.transactionService.seeTransaction(id).subscribe({\n      next: res => {\n        this.transaction = res;\n      },\n      error: errorData => {\n        Swal.fire({\n          title: \"Error\",\n          text: \"Error al cargar la información de la transacción\",\n          icon: \"error\",\n          confirmButtonColor: '#007B3E'\n        });\n        this.spinner.hide();\n      },\n      complete: () => {\n        this.spinner.hide();\n      }\n    });\n  }\n  //EDITAR TRANSACCION\n  updateTransactionModal(id) {\n    this.spinner.show();\n    this.idtransaction = id;\n    this.seeTransaction(id);\n    this.loadCategories();\n  }\n  loadCategories() {\n    this.categoryService.listCategories().subscribe({\n      next: res => {\n        this.categories = res;\n      },\n      error: errorData => {\n        alert(\"Error al registrar la transaccion\");\n      },\n      complete: () => {\n        this.actualizarFormulario();\n      }\n    });\n  }\n  actualizarFormulario() {\n    this.formtransactionUpdate.get(\"type\")?.setValue(this.transaction.type);\n    this.formtransactionUpdate.get(\"amount\")?.setValue(this.transaction.amount);\n    this.formtransactionUpdate.get(\"categoryName\")?.setValue(this.transaction.categoryName);\n    this.formtransactionUpdate.get(\"categoryId\")?.setValue(this.transaction.categoryId);\n    this.formtransactionUpdate.get(\"date\")?.setValue(this.transaction.date);\n    this.formtransactionUpdate.get(\"description\")?.setValue(this.transaction.description);\n    this.formtransactionUpdate.get(\"id\")?.setValue(this.transaction.id);\n  }\n  updateTransaction() {\n    Swal.fire({\n      title: '¿Estás seguro?',\n      text: \"Confirma si deseas editar la transacción\",\n      icon: 'question',\n      showCancelButton: true,\n      confirmButtonColor: '#007B3E',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Si , crear',\n      cancelButtonText: 'No, cancelar',\n      reverseButtons: true,\n      buttonsStyling: true\n    }).then(result => {\n      if (result.isConfirmed) {\n        if (this.formtransactionUpdate.valid) {\n          this.spinner.show();\n          var idcategory = this.formtransaction.get('categoryName')?.value;\n          this.formtransactionUpdate.get('categoryId')?.setValue(idcategory);\n          this.formtransactionUpdate.get('id')?.setValue(this.idtransaction);\n          this.transactionService.updateTransaction(this.idtransaction, this.formtransaction.value).subscribe({\n            next: res => {},\n            error: errorData => {\n              Swal.fire({\n                title: \"Error\",\n                text: \"Hubo un problema al editar la transacción\",\n                icon: \"success\",\n                confirmButtonColor: '#007B3E'\n              });\n            },\n            complete: () => {\n              this.spinner.hide();\n              Swal.fire({\n                title: \"Hecho\",\n                text: \"La transacción fue editada.\",\n                icon: \"success\",\n                confirmButtonColor: '#007B3E'\n              });\n              this.creteDatatable();\n            }\n          });\n        } else {\n          this.formtransaction.markAllAsTouched();\n          Swal.fire({\n            title: \"Error\",\n            text: \"Debes llenar todos los capos obligatorios\",\n            icon: \"warning\",\n            confirmButtonColor: '#007B3E'\n          });\n        }\n      }\n    });\n  }\n};\nTransactionsListComponent = __decorate([Component({\n  selector: 'app-transactions-list',\n  templateUrl: './transactions-list.component.html',\n  styleUrls: ['./transactions-list.component.css']\n})], TransactionsListComponent);\nexport { TransactionsListComponent };","map":{"version":3,"mappings":"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","names":["Component","transaction","DataTable","FormControl","FormGroup","Validators","Swal","TransactionsListComponent","constructor","transactionService","categoryService","router","spinner","required","pattern","type","amount","categoryName","categoryId","date","description","ngOnInit","show","listTransactions","creteDatatable","setTimeout","table","destroy","language","url","columnDefs","targets","className","paging","pagingType","layout","topStart","topEnd","bottomStart","bottomEnd","listarTransactions","subscribe","next","res","transactions","error","errorData","fire","title","text","icon","confirmButtonColor","hide","complete","deleteTransaction","id","showCancelButton","cancelButtonColor","confirmButtonText","cancelButtonText","reverseButtons","buttonsStyling","then","result","isConfirmed","createTransactionModal","importCategories","listCategories","categories","formtransaction","get","createTransaction","valid","value","markAllAsTouched","seeTransactionModal","seeTransaction","updateTransactionModal","idtransaction","loadCategories","alert","actualizarFormulario","formtransactionUpdate","setValue","updateTransaction","idcategory","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\Documentos\\Desarrollo\\pruebas\\Finance Tracker\\Finance-Tracker-frontend\\src\\app\\admin\\components\\transactions-list\\transactions-list.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { TransactionService } from '../../services/transaction.service';\nimport { Router } from '@angular/router';\nimport { transaction } from '../../models/transaction';\nimport DataTable from 'datatables.net-dt';\nimport { CategoryoService } from '../../services/category.service';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { category } from '../../models/category';\nimport Swal from 'sweetalert2';\nimport { NgxSpinnerService } from 'ngx-spinner';\n\n@Component({\n  selector: 'app-transactions-list',\n  templateUrl: './transactions-list.component.html',\n  styleUrls: ['./transactions-list.component.css']\n})\nexport class TransactionsListComponent {\n  table:any;\n  transactions:transaction[];\n\n  constructor(private transactionService: TransactionService, private categoryService:CategoryoService, private router:Router, private spinner:NgxSpinnerService){}\n\n  ngOnInit(): void {\n    this.spinner.show();\n    this.listTransactions();\n  }\n\n  creteDatatable() {\n    setTimeout(() => {\n      if(this.table){\n        this.table.destroy();\n      }\n      this.table= new DataTable(\"#tabla_clientes\",{\n        language: {\n          url: '/assets/es-ES.json',\n        },\n        columnDefs: [\n          {\n            targets: \"_all\",\n            className: 'dt-center'\n          }\n        ],\n        paging: true,\n        pagingType: 'simple',\n        layout:{\n          topStart: 'div',\n          topEnd: 'pageLength',\n          bottomStart: 'paging',\n          bottomEnd: 'info'\n        },\n      });\n    }, 1);\n  }\n\n  listTransactions(){\n    this.transactionService.listarTransactions().subscribe({\n      next: (res) => {\n        this.transactions=res;\n      },\n      error: (errorData) => {\n        Swal.fire({\n          title: \"Error\",\n          text: \"Error al cargar la lista de transacciones\",\n          icon: \"error\",\n          confirmButtonColor: '#007B3E'\n        });\n        this.spinner.hide();\n      },\n      complete: () => {\n        this.creteDatatable();\n        this.spinner.hide();\n      }\n    });\n  }\n\n\n  //ELIMINAR TRANSACCION\n  deleteTransaction(id:number){\n    Swal.fire({\n      title: '¿Estás seguro?',\n      text: \"Confirma si deseas eliminar la transacción\",\n      icon: 'question',\n      showCancelButton: true,\n      confirmButtonColor: '#007B3E',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Si , crear',\n      cancelButtonText: 'No, cancelar',\n      reverseButtons: true,\n      buttonsStyling: true\n    }).then((result) => {\n      if (result.isConfirmed) {\n        this.spinner.show();\n        this.transactionService.deleteTransaction(id).subscribe({\n          next:(res)=>{\n          },\n          error:(errorData)=>{\n            Swal.fire({\n              title: \"Error\",\n              text: \"Error, no se pudo eliminar la transacción\",\n              icon: \"error\",\n              confirmButtonColor: '#007B3E'\n            });\n          },\n          complete:()=>{\n            this.spinner.hide();\n            Swal.fire({\n              title: \"Hecho\",\n              text: \"La transaccion ha sido eliminada\",\n              icon: \"success\",\n              confirmButtonColor: '#007B3E'\n            });\n            this.creteDatatable();\n          }\n        });\n      }});\n  }\n\n  //Crear Transacciones\n  categories:category[];\n  createTransactionModal(){\n    this.importCategories();\n  }\n\n  importCategories(){\n    this.spinner.show();\n    this.categoryService.listCategories().subscribe({\n      next:(res)=>{\n        this.categories=res;\n      },\n      error:(errorData)=>{\n        Swal.fire({\n          title: \"Error\",\n          text: \"Error al cargar las categorías\",\n          icon: \"error\",\n          confirmButtonColor: '#007B3E'\n        });\n        this.spinner.hide();\n      },\n      complete:()=>{\n        this.spinner.hide();\n      }\n    });\n  }\n\n  formtransaction = new FormGroup({\n    'type': new FormControl('', Validators.required),\n    'amount': new FormControl('', [Validators.required, Validators.pattern(/^\\d*\\.?\\d*$/)]),\n    'categoryId': new FormControl(null, Validators.required),\n    'description': new FormControl('', Validators.required),\n    'date': new FormControl(null, Validators.required)\n  });\n\n  get type() {\n    return this.formtransaction.get('type') as FormControl;\n  }\n\n  get amount() {\n    return this.formtransaction.get('amount') as FormControl;\n  }\n\n  get categoryId() {\n    return this.formtransaction.get('categoryId') as FormControl;\n  }\n\n  get date() {\n    return this.formtransaction.get('date') as FormControl;\n  }\n\n  createTransaction(){\n    Swal.fire({\n      title: '¿Estás seguro?',\n      text: \"Confirma si deseas registrar la transacción\",\n      icon: 'question',\n      showCancelButton: true,\n      confirmButtonColor: '#007B3E',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Si , crear',\n      cancelButtonText: 'No, cancelar',\n      reverseButtons: true,\n      buttonsStyling: true\n    }).then((result) => {\n      if (result.isConfirmed) {\n        if(this.formtransaction.valid){\n          this.spinner.show();\n          this.transactionService.createTransaction(this.formtransaction.value).subscribe({\n            next:(res)=>{\n            },\n            error:(errorData)=>{\n              Swal.fire({\n                title: \"Error\",\n                text: \"Error al registrar la transacción\",\n                icon: \"error\",\n                confirmButtonColor: '#007B3E'\n              });\n              this.spinner.hide();\n            },\n            complete:()=>{\n              this.listTransactions();\n            }\n          });\n        }\n        else{\n          this.formtransaction.markAllAsTouched();\n          Swal.fire({\n            title: \"Error\",\n            text: \"Debes llenar todos los capos obligatorios\",\n            icon: \"warning\",\n            confirmButtonColor: '#007B3E'\n          });\n        }\n      }});\n  }\n\n  //VER TRANSACCION\n\n  seeTransactionModal(id:number){\n    this.seeTransaction(id);\n  }\n\n  seeTransaction(id:number){\n    this.spinner.show();\n    this.transactionService.seeTransaction(id).subscribe({\n      next:(res)=>{\n        this.transaction=res;\n      },\n      error: (errorData)=> {\n        Swal.fire({\n          title: \"Error\",\n          text: \"Error al cargar la información de la transacción\",\n          icon: \"error\",\n          confirmButtonColor: '#007B3E'\n        });\n        this.spinner.hide();\n      },\n      complete: () => {\n        this.spinner.hide();\n      }\n    });\n  }\n\n  //EDITAR TRANSACCION\n\n  updateTransactionModal(id:number){\n    this.spinner.show();\n    this.idtransaction= id;\n    this.seeTransaction(id);\n    this.loadCategories();\n  }\n\n  idtransaction:number;\n  transaction:transaction= new transaction();\n\n  loadCategories(){\n    this.categoryService.listCategories().subscribe({\n      next:(res)=>{\n        this.categories=res;\n      },\n      error:(errorData)=>{\n        alert(\"Error al registrar la transaccion\")\n      },\n      complete:()=>{\n        this.actualizarFormulario();\n      }\n    });\n  }\n\n  formtransactionUpdate= new FormGroup({\n      'type': new FormControl(this.transaction.type, Validators.required),\n      'amount': new FormControl(this.transaction.amount, Validators.required),\n      'categoryName': new FormControl(this.transaction.categoryName, Validators.required),\n      'categoryId': new FormControl(this.transaction.categoryId, Validators.required),\n      'date': new FormControl(this.transaction.date, Validators.required),\n      'description': new FormControl(this.transaction.description, Validators.required),\n      'id': new FormControl(0)\n  });\n\n  actualizarFormulario(){\n    this.formtransactionUpdate.get(\"type\")?.setValue(this.transaction.type);\n    this.formtransactionUpdate.get(\"amount\")?.setValue(this.transaction.amount);\n    this.formtransactionUpdate.get(\"categoryName\")?.setValue(this.transaction.categoryName);\n    this.formtransactionUpdate.get(\"categoryId\")?.setValue(this.transaction.categoryId);\n    this.formtransactionUpdate.get(\"date\")?.setValue(this.transaction.date);\n    this.formtransactionUpdate.get(\"description\")?.setValue(this.transaction.description);\n    this.formtransactionUpdate.get(\"id\")?.setValue(this.transaction.id);\n  }\n\n  updateTransaction(){\n    Swal.fire({\n      title: '¿Estás seguro?',\n      text: \"Confirma si deseas editar la transacción\",\n      icon: 'question',\n      showCancelButton: true,\n      confirmButtonColor: '#007B3E',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Si , crear',\n      cancelButtonText: 'No, cancelar',\n      reverseButtons: true,\n      buttonsStyling: true\n    }).then((result) => {\n      if (result.isConfirmed) {\n        if(this.formtransactionUpdate.valid){\n          this.spinner.show();\n          var idcategory:any = this.formtransaction.get('categoryName')?.value;\n          this.formtransactionUpdate.get('categoryId')?.setValue(idcategory);\n          this.formtransactionUpdate.get('id')?.setValue(this.idtransaction);\n          this.transactionService.updateTransaction(this.idtransaction, this.formtransaction.value).subscribe({\n            next:(res)=>{\n            },\n            error:(errorData)=>{\n              Swal.fire({\n                title: \"Error\",\n                text: \"Hubo un problema al editar la transacción\",\n                icon: \"success\",\n                confirmButtonColor: '#007B3E'\n              });\n            },\n            complete:()=>{\n              this.spinner.hide();\n              Swal.fire({\n                title: \"Hecho\",\n                text: \"La transacción fue editada.\",\n                icon: \"success\",\n                confirmButtonColor: '#007B3E'\n              });\n              this.creteDatatable();\n            }\n          });\n        }\n        else{\n          this.formtransaction.markAllAsTouched();\n          Swal.fire({\n            title: \"Error\",\n            text: \"Debes llenar todos los capos obligatorios\",\n            icon: \"warning\",\n            confirmButtonColor: '#007B3E'\n          });\n        }\n      }});\n  }\n\n\n\n  //GETTERS PARA LOS FORMULARIOS\n\n    // Getters para acceder a los controles del formulario de manera más sencilla\n   \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}