{"ast":null,"code":"import { transaction } from '../../models/transaction';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/transaction.service\";\nimport * as i2 from \"../../services/category.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"ngx-spinner\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/forms\";\nfunction UpdateTransactionComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 23);\n    i0.ɵɵtext(1, \" Este es un campo obligatorio \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateTransactionComponent_div_16_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Este es un campo obligatorio.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateTransactionComponent_div_16_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Solo puedes incluir valores n\\u00FAmericos o decimales \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateTransactionComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 24);\n    i0.ɵɵtemplate(1, UpdateTransactionComponent_div_16_div_1_Template, 2, 0, \"div\", 25);\n    i0.ɵɵtemplate(2, UpdateTransactionComponent_div_16_div_2_Template, 2, 0, \"div\", 25);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.amount.errors == null ? null : ctx_r1.amount.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.amount.errors == null ? null : ctx_r1.amount.errors[\"pattern\"]);\n  }\n}\nfunction UpdateTransactionComponent_option_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 26);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const category_r7 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate(\"value\", category_r7.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(category_r7.name);\n  }\n}\nfunction UpdateTransactionComponent_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 23);\n    i0.ɵɵtext(1, \" Este es un campo obligatorio \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateTransactionComponent_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 23);\n    i0.ɵɵtext(1, \" Este es un campo obligatorio \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class UpdateTransactionComponent {\n  constructor(transactionService, categoryService, router, route, spinner) {\n    this.transactionService = transactionService;\n    this.categoryService = categoryService;\n    this.router = router;\n    this.route = route;\n    this.spinner = spinner;\n    this.transaction = new transaction();\n    this.formtransaction = new FormGroup({\n      'type': new FormControl(this.transaction.type, Validators.required),\n      'amount': new FormControl(this.transaction.amount, Validators.required),\n      'categoryName': new FormControl(this.transaction.categoryName, Validators.required),\n      'categoryId': new FormControl(this.transaction.categoryId),\n      'date': new FormControl(this.transaction.date, Validators.required),\n      'description': new FormControl(this.transaction.description, Validators.required),\n      'id': new FormControl(0)\n    });\n  }\n  ngOnInit() {\n    this.spinner.show();\n    this.idtransaction = this.route.snapshot.params[\"id\"];\n    this.loadTransaction();\n  }\n  loadTransaction() {\n    this.transactionService.seeTransaction(this.idtransaction).subscribe({\n      next: res => {\n        this.transaction = res;\n        this.loadCategories();\n        this.actualizarFormulario();\n      },\n      error: errorData => {\n        alert(\"Error al carga la información de la transacción\");\n      },\n      complete: () => {\n        alert(\"Datos cargados\");\n      }\n    });\n  }\n  loadCategories() {\n    this.categoryService.listCategories().subscribe({\n      next: res => {\n        this.categories = res;\n      },\n      error: errorData => {\n        alert(\"Error al registrar la transaccion\");\n      },\n      complete: () => {\n        alert(\"categorias Importadas\");\n      }\n    });\n  }\n  actualizarFormulario() {\n    this.formtransaction.get(\"type\")?.setValue(this.transaction.type);\n    this.formtransaction.get(\"amount\")?.setValue(this.transaction.amount);\n    this.formtransaction.get(\"categoryName\")?.setValue(this.transaction.categoryName);\n    this.formtransaction.get(\"categoryId\")?.setValue(this.transaction.categoryId);\n    this.formtransaction.get(\"date\")?.setValue(this.transaction.date);\n    this.formtransaction.get(\"description\")?.setValue(this.transaction.description);\n    this.formtransaction.get(\"id\")?.setValue(this.transaction.id);\n    console.log(this.formtransaction.value);\n  }\n  get type() {\n    return this.formtransaction.get('type');\n  }\n  get amount() {\n    return this.formtransaction.get('amount');\n  }\n  get categoryName() {\n    return this.formtransaction.get('categoryName');\n  }\n  get date() {\n    return this.formtransaction.get('date');\n  }\n  backToList() {\n    this.router.navigate([\"/dashboard/listTransactions\"]);\n  }\n  updateTransaction() {\n    Swal.fire({\n      title: '¿Estás seguro?',\n      text: \"Confirma si deseas editar la transacción\",\n      icon: 'question',\n      showCancelButton: true,\n      confirmButtonColor: '#007B3E',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Si , crear',\n      cancelButtonText: 'No, cancelar',\n      reverseButtons: true,\n      buttonsStyling: true\n    }).then(result => {\n      if (result.isConfirmed) {\n        if (this.formtransaction.valid) {\n          var idcategory = this.formtransaction.get('categoryName')?.value;\n          this.formtransaction.get('categoryId')?.setValue(idcategory);\n          this.formtransaction.get('id')?.setValue(this.idtransaction);\n          this.transactionService.updateTransaction(this.idtransaction, this.formtransaction.value).subscribe({\n            next: res => {},\n            error: errorData => {\n              alert(\"Error al editar la transacción\");\n            },\n            complete: () => {\n              alert(\"Transacción editada\");\n            }\n          });\n        } else {\n          this.formtransaction.markAllAsTouched();\n          Swal.fire({\n            title: \"Error\",\n            text: \"Debes llenar todos los capos obligatorios\",\n            icon: \"warning\",\n            confirmButtonColor: '#007B3E'\n          });\n        }\n      }\n    });\n  }\n  static #_ = this.ɵfac = function UpdateTransactionComponent_Factory(t) {\n    return new (t || UpdateTransactionComponent)(i0.ɵɵdirectiveInject(i1.TransactionService), i0.ɵɵdirectiveInject(i2.CategoryoService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i4.NgxSpinnerService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UpdateTransactionComponent,\n    selectors: [[\"app-update-transaction\"]],\n    decls: 37,\n    vars: 7,\n    consts: [[1, \"spinner\"], [\"bdColor\", \"rgba(0, 0, 0, 0)\", \"template\", \"<img src='/assets/spinner.gif'/>\"], [1, \"titulo\"], [1, \"text-center\"], [3, \"formGroup\"], [1, \"container\", \"row\"], [1, \"form-group\", \"col-md-6\"], [\"for\", \"nombre\"], [\"type\", \"text\", \"formControlName\", \"type\", 1, \"form-control\"], [\"class\", \"alert alert-danger mt-2\", 4, \"ngIf\"], [\"for\", \"url\"], [\"type\", \"text\", \"formControlName\", \"amount\", 1, \"form-control\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [\"for\", \"descripcion\"], [\"formControlName\", \"categoryName\", 1, \"form-select\", \"modal__input\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"fecha\"], [\"type\", \"date\", \"formControlName\", \"date\", 1, \"form-control\"], [\"for\", \"\"], [\"type\", \"text\", \"formControlName\", \"description\", 1, \"form-control\"], [1, \"buttons\", \"form-group\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"btn\", \"btn-success\", 3, \"click\"], [1, \"alert\", \"alert-danger\", \"mt-2\"], [1, \"alert\", \"alert-danger\"], [4, \"ngIf\"], [3, \"value\"]],\n    template: function UpdateTransactionComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"ngx-spinner\", 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 2)(3, \"h2\", 3);\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(5, \"form\", 4)(6, \"div\", 5)(7, \"div\", 6)(8, \"label\", 7);\n        i0.ɵɵtext(9, \"Tipo de transacci\\u00F3n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"input\", 8);\n        i0.ɵɵtemplate(11, UpdateTransactionComponent_div_11_Template, 2, 0, \"div\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 6)(13, \"label\", 10);\n        i0.ɵɵtext(14, \"Cantidad\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(15, \"input\", 11);\n        i0.ɵɵtemplate(16, UpdateTransactionComponent_div_16_Template, 3, 2, \"div\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 6)(18, \"label\", 13);\n        i0.ɵɵtext(19, \"Categor\\u00EDa:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"select\", 14);\n        i0.ɵɵtemplate(21, UpdateTransactionComponent_option_21_Template, 2, 2, \"option\", 15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(22, UpdateTransactionComponent_div_22_Template, 2, 0, \"div\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"div\", 6)(24, \"label\", 16);\n        i0.ɵɵtext(25, \"Fecha de transacci\\u00F3n:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(26, \"input\", 17);\n        i0.ɵɵtemplate(27, UpdateTransactionComponent_div_27_Template, 2, 0, \"div\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"div\", 6)(29, \"label\", 18);\n        i0.ɵɵtext(30, \"Descripci\\u00F3n:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(31, \"input\", 19);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(32, \"div\", 20)(33, \"button\", 21);\n        i0.ɵɵlistener(\"click\", function UpdateTransactionComponent_Template_button_click_33_listener() {\n          return ctx.backToList();\n        });\n        i0.ɵɵtext(34, \"Volver\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(35, \"button\", 22);\n        i0.ɵɵlistener(\"click\", function UpdateTransactionComponent_Template_button_click_35_listener() {\n          return ctx.updateTransaction();\n        });\n        i0.ɵɵtext(36, \"Editar\");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\"transacci\\u00F3n numero \", ctx.idtransaction, \"\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.formtransaction);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.type.invalid && (ctx.type.dirty || ctx.type.touched));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.amount.invalid && (ctx.amount.dirty || ctx.amount.touched));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.categories);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.categoryName.invalid && (ctx.categoryName.dirty || ctx.categoryName.touched));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.date.invalid && (ctx.date.dirty || ctx.date.touched));\n      }\n    },\n    dependencies: [i5.NgForOf, i5.NgIf, i6.ɵNgNoValidate, i6.NgSelectOption, i6.ɵNgSelectMultipleOption, i6.DefaultValueAccessor, i6.SelectControlValueAccessor, i6.NgControlStatus, i6.NgControlStatusGroup, i6.FormGroupDirective, i6.FormControlName, i4.NgxSpinnerComponent],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["transaction","FormControl","FormGroup","Validators","Swal","i0","UpdateTransactionComponent","constructor","transactionService","categoryService","router","route","spinner","type","required","amount","categoryName","categoryId","date","description","ngOnInit","show","idtransaction","snapshot","params","loadTransaction","seeTransaction","subscribe","next","res","loadCategories","actualizarFormulario","error","errorData","alert","complete","listCategories","categories","formtransaction","get","setValue","id","console","log","value","backToList","navigate","updateTransaction","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","reverseButtons","buttonsStyling","then","result","isConfirmed","valid","idcategory","markAllAsTouched","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\Documentos\\Desarrollo\\pruebas\\Finance Tracker\\Finance-Tracker-frontend\\src\\app\\admin\\components\\update-transaction\\update-transaction.component.ts","D:\\Documentos\\Desarrollo\\pruebas\\Finance Tracker\\Finance-Tracker-frontend\\src\\app\\admin\\components\\update-transaction\\update-transaction.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { transaction } from '../../models/transaction';\nimport { TransactionService } from '../../services/transaction.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { category } from '../../models/category';\nimport { CategoryoService } from '../../services/category.service';\nimport Swal from 'sweetalert2';\nimport { NgxSpinnerService } from 'ngx-spinner';\n\n@Component({\n  selector: 'app-update-transaction',\n  templateUrl: './update-transaction.component.html',\n  styleUrls: ['./update-transaction.component.css']\n})\nexport class UpdateTransactionComponent {\n  categories:category[];\n  idtransaction:number;\n  transaction:transaction= new transaction();\n  constructor(private transactionService:TransactionService, private categoryService:CategoryoService, private router:Router, private route:ActivatedRoute, private spinner:NgxSpinnerService){}\n  \n  ngOnInit(): void {\n    this.spinner.show();\n    this.idtransaction= this.route.snapshot.params[\"id\"];\n    this.loadTransaction();\n  }\n\n  loadTransaction(){\n    this.transactionService.seeTransaction(this.idtransaction).subscribe({\n      next:(res)=>{\n        this.transaction=res;\n        this.loadCategories();\n        this.actualizarFormulario();\n      },\n      error: (errorData)=> {\n        alert(\"Error al carga la información de la transacción\");\n      },\n      complete: () => {\n        \n        alert(\"Datos cargados\");\n      }\n    });\n  }\n\n  loadCategories(){\n    this.categoryService.listCategories().subscribe({\n      next:(res)=>{\n        this.categories=res;\n      },\n      error:(errorData)=>{\n        alert(\"Error al registrar la transaccion\")\n      },\n      complete:()=>{\n        alert(\"categorias Importadas\");\n      }\n    });\n  }\n\n  \n  formtransaction= new FormGroup({\n      'type': new FormControl(this.transaction.type, Validators.required),\n      'amount': new FormControl(this.transaction.amount, Validators.required),\n      'categoryName': new FormControl(this.transaction.categoryName, Validators.required),\n      'categoryId': new FormControl(this.transaction.categoryId),\n      'date': new FormControl(this.transaction.date, Validators.required),\n      'description': new FormControl(this.transaction.description, Validators.required),\n      'id': new FormControl(0)\n  });\n\n  actualizarFormulario(){\n    this.formtransaction.get(\"type\")?.setValue(this.transaction.type);\n    this.formtransaction.get(\"amount\")?.setValue(this.transaction.amount);\n    this.formtransaction.get(\"categoryName\")?.setValue(this.transaction.categoryName);\n    this.formtransaction.get(\"categoryId\")?.setValue(this.transaction.categoryId);\n    this.formtransaction.get(\"date\")?.setValue(this.transaction.date);\n    this.formtransaction.get(\"description\")?.setValue(this.transaction.description);\n    this.formtransaction.get(\"id\")?.setValue(this.transaction.id);\n    console.log(this.formtransaction.value);\n  }\n\n  get type() {\n    return this.formtransaction.get('type') as FormControl;\n  }\n\n  get amount() {\n    return this.formtransaction.get('amount') as FormControl;\n  }\n\n  get categoryName() {\n    return this.formtransaction.get('categoryName') as FormControl;\n  }\n\n  get date() {\n    return this.formtransaction.get('date') as FormControl;\n  }\n\n\n  backToList(){\n    this.router.navigate([\"/dashboard/listTransactions\"]);\n  }\n\n  updateTransaction(){\n    Swal.fire({\n      title: '¿Estás seguro?',\n      text: \"Confirma si deseas editar la transacción\",\n      icon: 'question',\n      showCancelButton: true,\n      confirmButtonColor: '#007B3E',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Si , crear',\n      cancelButtonText: 'No, cancelar',\n      reverseButtons: true,\n      buttonsStyling: true\n    }).then((result) => {\n      if (result.isConfirmed) {\n        if(this.formtransaction.valid){\n          var idcategory:any = this.formtransaction.get('categoryName')?.value;\n          this.formtransaction.get('categoryId')?.setValue(idcategory);\n          this.formtransaction.get('id')?.setValue(this.idtransaction);\n          this.transactionService.updateTransaction(this.idtransaction, this.formtransaction.value).subscribe({\n            next:(res)=>{\n            },\n            error:(errorData)=>{\n              alert(\"Error al editar la transacción\")\n            },\n            complete:()=>{\n              alert(\"Transacción editada\");\n            }\n          });\n        }\n        else{\n          this.formtransaction.markAllAsTouched();\n          Swal.fire({\n            title: \"Error\",\n            text: \"Debes llenar todos los capos obligatorios\",\n            icon: \"warning\",\n            confirmButtonColor: '#007B3E'\n          });\n        }\n      }});\n  }\n}\n","<div class=\"spinner\">\n    <ngx-spinner\n    bdColor=\"rgba(0, 0, 0, 0)\"\n    template=\"<img src='/assets/spinner.gif'/>\"\n    ></ngx-spinner>\n</div>\n\n<div class=\"titulo\">\n    <h2 class=\"text-center\">transacción numero {{idtransaction}}</h2>\n</div>\n\n<form [formGroup]=\"formtransaction\">\n    <div class=\"container row\">\n        <div class=\"form-group col-md-6\">\n            <label for=\"nombre\">Tipo de transacción</label>\n            <input class=\"form-control\" type=\"text\" formControlName=\"type\">\n            <div class=\"alert alert-danger mt-2\" *ngIf=\"type.invalid && (type.dirty || type.touched)\">\n                Este es un campo obligatorio\n            </div>\n        </div>\n    \n        <div class=\"form-group col-md-6\">\n            <label for=\"url\">Cantidad</label>\n            <input class=\"form-control\" type=\"text\" formControlName=\"amount\">\n            <div *ngIf=\"amount.invalid && (amount.dirty || amount.touched)\" class=\"alert alert-danger\">\n                <div *ngIf=\"amount.errors?.['required']\">Este es un campo obligatorio.</div>\n                <div *ngIf=\"amount.errors?.['pattern']\">\n                    Solo puedes incluir valores númericos o decimales\n                </div>\n            </div>\n        </div>\n    \n        <div class=\"form-group col-md-6\">\n            <label for=\"descripcion\">Categoría:</label>\n            <select  class=\"form-select modal__input\" formControlName=\"categoryName\">\n                <option *ngFor=\"let category of categories\" value={{category.id}}>{{category.name}}</option>\n            <!--   <div class=\"alert alert-danger\" *ngIf=\"email.invalid && (email.dirty || email.touched)\">\n                <div *ngIf=\"email.errors?.['minlength']\">\n                    Digite su email por favor\n                </div>\n                <div *ngIf=\"email.errors?.['pattern']\">\n                    Por favor digite el email con el siguiente formato : user100@gmail.com\n                </div>\n            </div>-->\n            </select>\n            <div class=\"alert alert-danger mt-2\" *ngIf=\"categoryName.invalid && (categoryName.dirty || categoryName.touched)\">\n                Este es un campo obligatorio\n            </div>\n        </div>\n    \n        <div class=\"form-group col-md-6\">\n            <label for=\"fecha\">Fecha de transacción:</label>\n            <input class=\"form-control\" type=\"date\" formControlName=\"date\">\n            <div class=\"alert alert-danger mt-2\" *ngIf=\"date.invalid && (date.dirty || date.touched)\">\n                Este es un campo obligatorio\n            </div>\n        </div>\n    \n        <div class=\"form-group col-md-6\">\n            <label for=\"\">Descripción:</label>\n            <input class=\"form-control\" type=\"text\"  formControlName=\"description\">\n        </div>\n        <div class=\"buttons form-group\">\n            <button (click)=\"backToList()\" class=\"btn btn-primary\">Volver</button>\n            <button (click)=\"updateTransaction()\" class=\"btn btn-success\">Editar</button>\n        </div>\n    </div>\n</form>\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}