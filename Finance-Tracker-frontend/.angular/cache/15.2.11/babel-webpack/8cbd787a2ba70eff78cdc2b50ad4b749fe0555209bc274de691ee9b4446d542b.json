{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/autenticacion.service\";\nexport class AuthInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(request, next) {\n    const token = this.authService.getTOken();\n    if (token) {\n      const cloned = request.clone({\n        headers: request.headers.set('Authorization', `Bearer ${token}`)\n      });\n      return next.handle(cloned);\n    }\n    return next.handle(request);\n  }\n  static #_ = this.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AutenticacionService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n}","map":{"version":3,"mappings":";;AAWA,OAAM,MAAOA,eAAe;EAE1BC,YAAoBC,WAAgC;IAAhC,gBAAW,GAAXA,WAAW;EAAwB;EAEvDC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,MAAMC,KAAK,GAAG,IAAI,CAACJ,WAAW,CAACK,QAAQ,EAAE;IAEzC,IAAGD,KAAK,EAAC;MACP,MAAME,MAAM,GAAEJ,OAAO,CAACK,KAAK,CAAC;QAC1BC,OAAO,EAAEN,OAAO,CAACM,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,UAAUL,KAAK,EAAE;OAChE,CAAC;MACF,OAAOD,IAAI,CAACO,MAAM,CAACJ,MAAM,CAAC;;IAG5B,OAAOH,IAAI,CAACO,MAAM,CAACR,OAAO,CAAC;EAC7B;EAAC;qBAfUJ,eAAe;EAAA;EAAA;WAAfA,eAAe;IAAAa,SAAfb,eAAe;EAAA","names":["AuthInterceptor","constructor","authService","intercept","request","next","token","getTOken","cloned","clone","headers","set","handle","factory"],"sourceRoot":"","sources":["D:\\Documentos\\Desarrollo\\proyectos\\Proyectos funcionales\\Angular\\CRUD\\crud-frontend\\src\\app\\shared\\helpers\\auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AutenticacionService } from '../services/autenticacion.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor(private authService:AutenticacionService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    const token = this.authService.getTOken();\n\n    if(token){\n      const cloned= request.clone({\n        headers: request.headers.set('Authorization', `Bearer ${token}`)\n      });\n      return next.handle(cloned);\n    }\n    \n    return next.handle(request);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}