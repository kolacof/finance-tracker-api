{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/autenticacion.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    if (this.authService.getTOken()) {\n      return true;\n    }\n    this.router.navigate(['login']);\n    return true;\n  }\n  static #_ = this.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.AutenticacionService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,SAAS;EAEpBC,YAAoBC,WAAgC,EAASC,MAAa;IAAtD,gBAAW,GAAXD,WAAW;IAA8B,WAAM,GAANC,MAAM;EAAS;EAE5EC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAE1B,IAAG,IAAI,CAACJ,WAAW,CAACK,QAAQ,EAAE,EAAC;MAC7B,OAAO,IAAI;;IAEb,IAAI,CAACJ,MAAM,CAACK,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;IAC/B,OAAO,IAAI;EACb;EAAC;qBAbUR,SAAS;EAAA;EAAA;WAATA,SAAS;IAAAS,SAATT,SAAS;IAAAU,YAFR;EAAM","names":["AuthGuard","constructor","authService","router","canActivate","route","state","getTOken","navigate","factory","providedIn"],"sourceRoot":"","sources":["D:\\Documentos\\Desarrollo\\proyectos\\Proyectos funcionales\\Angular\\CRUD\\crud-frontend\\src\\app\\shared\\helpers\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AutenticacionService } from '../services/autenticacion.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  \n  constructor(private authService:AutenticacionService,private router:Router){}\n  \n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    \n    if(this.authService.getTOken()){\n      return true;\n    }\n    this.router.navigate(['login']);\n    return true;\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}