{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { transaction } from '../../models/transaction';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet UpdateTransactionComponent = class UpdateTransactionComponent {\n  constructor(transactionService, categoryService, router, route) {\n    this.transactionService = transactionService;\n    this.categoryService = categoryService;\n    this.router = router;\n    this.route = route;\n    this.transaction = new transaction();\n    this.formtransaction = new FormGroup({\n      'type': new FormControl(this.transaction.type, Validators.required),\n      'amount': new FormControl(this.transaction.amount, Validators.required),\n      'categoryName': new FormControl(this.transaction.categoryName, Validators.required),\n      'categoryId': new FormControl(this.transaction.categoryId, Validators.required),\n      'date': new FormControl(this.transaction.date, Validators.required),\n      'description': new FormControl(this.transaction.description, Validators.required),\n      'id': new FormControl(0)\n    });\n  }\n  ngOnInit() {\n    this.idtransaction = this.route.snapshot.params[\"id\"];\n    this.loadCategories();\n    this.loadTransaction();\n  }\n  loadCategories() {\n    this.categoryService.listCategories().subscribe({\n      next: res => {\n        this.categories = res;\n      },\n      error: errorData => {\n        alert(\"Error al registrar la transaccion\");\n      },\n      complete: () => {\n        //alert(\"categorias Importadas\");\n      }\n    });\n  }\n  actualizarFormulario() {\n    this.formtransaction = new FormGroup({\n      'type': new FormControl(this.transaction.type, Validators.required),\n      'amount': new FormControl(this.transaction.amount, Validators.required),\n      'categoryName': new FormControl(this.transaction.categoryName, Validators.required),\n      'categoryId': new FormControl(this.transaction.categoryId, Validators.required),\n      'date': new FormControl(this.transaction.date, Validators.required),\n      'description': new FormControl(this.transaction.description, Validators.required),\n      'id': new FormControl(this.transaction.id, Validators.required)\n    });\n  }\n  loadTransaction() {\n    this.transactionService.seeTransaction(this.idtransaction).subscribe({\n      next: res => {\n        this.transaction = res;\n        console.log(this.transaction);\n      },\n      error: errorData => {\n        alert(\"Error al carga la informaci贸n de la transacci贸n\");\n      },\n      complete: () => {\n        this.actualizarFormulario();\n        alert(\"Datos cargados\");\n      }\n    });\n  }\n  backToList() {\n    this.router.navigate([\"/dashboard/listTransactions\"]);\n  }\n  updateTransaction() {\n    var idcategory = this.formtransaction.get('categoryName')?.value;\n    this.formtransaction.get('categoryId')?.setValue(idcategory);\n    this.formtransaction.get('id')?.setValue(this.idtransaction);\n    this.transactionService.updateTransaction(this.idtransaction, this.formtransaction.value).subscribe({\n      next: res => {},\n      error: errorData => {\n        alert(\"Error al editar la transacci贸n\");\n      },\n      complete: () => {\n        alert(\"Transacci贸n editada\");\n      }\n    });\n  }\n};\nUpdateTransactionComponent = __decorate([Component({\n  selector: 'app-update-transaction',\n  templateUrl: './update-transaction.component.html',\n  styleUrls: ['./update-transaction.component.css']\n})], UpdateTransactionComponent);\nexport { UpdateTransactionComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAASC,WAAW,QAAQ,0BAA0B;AAGtD,SAASC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AAS5D,IAAMC,0BAA0B,GAAhC,MAAMA,0BAA0B;EAIrCC,YAAoBC,kBAAqC,EAAUC,eAAgC,EAAUC,MAAa,EAAUC,KAAoB;IAApI,uBAAkB,GAAlBH,kBAAkB;IAA6B,oBAAe,GAAfC,eAAe;IAA2B,WAAM,GAANC,MAAM;IAAiB,UAAK,GAALC,KAAK;IADzI,gBAAW,GAAc,IAAIT,WAAW,EAAE;IAyB1C,oBAAe,GAAE,IAAIE,SAAS,CAAC;MAC3B,MAAM,EAAE,IAAID,WAAW,CAAC,IAAI,CAACD,WAAW,CAACU,IAAI,EAAEP,UAAU,CAACQ,QAAQ,CAAC;MACnE,QAAQ,EAAE,IAAIV,WAAW,CAAC,IAAI,CAACD,WAAW,CAACY,MAAM,EAAET,UAAU,CAACQ,QAAQ,CAAC;MACvE,cAAc,EAAE,IAAIV,WAAW,CAAC,IAAI,CAACD,WAAW,CAACa,YAAY,EAAEV,UAAU,CAACQ,QAAQ,CAAC;MACnF,YAAY,EAAE,IAAIV,WAAW,CAAC,IAAI,CAACD,WAAW,CAACc,UAAU,EAAEX,UAAU,CAACQ,QAAQ,CAAC;MAC/E,MAAM,EAAE,IAAIV,WAAW,CAAC,IAAI,CAACD,WAAW,CAACe,IAAI,EAAEZ,UAAU,CAACQ,QAAQ,CAAC;MACnE,aAAa,EAAE,IAAIV,WAAW,CAAC,IAAI,CAACD,WAAW,CAACgB,WAAW,EAAEb,UAAU,CAACQ,QAAQ,CAAC;MACjF,IAAI,EAAE,IAAIV,WAAW,CAAC,CAAC;KAC1B,CAAC;EAhCwJ;EAE1JgB,QAAQ;IACN,IAAI,CAACC,aAAa,GAAE,IAAI,CAACT,KAAK,CAACU,QAAQ,CAACC,MAAM,CAAC,IAAI,CAAC;IACpD,IAAI,CAACC,cAAc,EAAE;IACrB,IAAI,CAACC,eAAe,EAAE;EACxB;EAEAD,cAAc;IACZ,IAAI,CAACd,eAAe,CAACgB,cAAc,EAAE,CAACC,SAAS,CAAC;MAC9CC,IAAI,EAAEC,GAAG,IAAG;QACV,IAAI,CAACC,UAAU,GAACD,GAAG;MACrB,CAAC;MACDE,KAAK,EAAEC,SAAS,IAAG;QACjBC,KAAK,CAAC,mCAAmC,CAAC;MAC5C,CAAC;MACDC,QAAQ,EAAC,MAAI;QACX;MAAA;KAGH,CAAC;EACJ;EAaAC,oBAAoB;IAClB,IAAI,CAACC,eAAe,GAAG,IAAI/B,SAAS,CAAE;MACpC,MAAM,EAAE,IAAID,WAAW,CAAC,IAAI,CAACD,WAAW,CAACU,IAAI,EAAEP,UAAU,CAACQ,QAAQ,CAAC;MACnE,QAAQ,EAAE,IAAIV,WAAW,CAAC,IAAI,CAACD,WAAW,CAACY,MAAM,EAAET,UAAU,CAACQ,QAAQ,CAAC;MACvE,cAAc,EAAE,IAAIV,WAAW,CAAC,IAAI,CAACD,WAAW,CAACa,YAAY,EAAEV,UAAU,CAACQ,QAAQ,CAAC;MACnF,YAAY,EAAE,IAAIV,WAAW,CAAC,IAAI,CAACD,WAAW,CAACc,UAAU,EAAEX,UAAU,CAACQ,QAAQ,CAAC;MAC/E,MAAM,EAAE,IAAIV,WAAW,CAAC,IAAI,CAACD,WAAW,CAACe,IAAI,EAAEZ,UAAU,CAACQ,QAAQ,CAAC;MACnE,aAAa,EAAE,IAAIV,WAAW,CAAC,IAAI,CAACD,WAAW,CAACgB,WAAW,EAAEb,UAAU,CAACQ,QAAQ,CAAC;MACjF,IAAI,EAAE,IAAIV,WAAW,CAAC,IAAI,CAACD,WAAW,CAACkC,EAAE,EAAE/B,UAAU,CAACQ,QAAQ;KAC/D,CAAC;EACJ;EAEAW,eAAe;IACb,IAAI,CAAChB,kBAAkB,CAAC6B,cAAc,CAAC,IAAI,CAACjB,aAAa,CAAC,CAACM,SAAS,CAAC;MACnEC,IAAI,EAAEC,GAAG,IAAG;QACV,IAAI,CAAC1B,WAAW,GAAC0B,GAAG;QACpBU,OAAO,CAACC,GAAG,CAAC,IAAI,CAACrC,WAAW,CAAC;MAC/B,CAAC;MACD4B,KAAK,EAAGC,SAAS,IAAG;QAClBC,KAAK,CAAC,iDAAiD,CAAC;MAC1D,CAAC;MACDC,QAAQ,EAAE,MAAK;QACb,IAAI,CAACC,oBAAoB,EAAE;QAC3BF,KAAK,CAAC,gBAAgB,CAAC;MACzB;KACD,CAAC;EACJ;EAEAQ,UAAU;IACR,IAAI,CAAC9B,MAAM,CAAC+B,QAAQ,CAAC,CAAC,6BAA6B,CAAC,CAAC;EACvD;EAEAC,iBAAiB;IACf,IAAIC,UAAU,GAAO,IAAI,CAACR,eAAe,CAACS,GAAG,CAAC,cAAc,CAAC,EAAEC,KAAK;IACpE,IAAI,CAACV,eAAe,CAACS,GAAG,CAAC,YAAY,CAAC,EAAEE,QAAQ,CAACH,UAAU,CAAC;IAC5D,IAAI,CAACR,eAAe,CAACS,GAAG,CAAC,IAAI,CAAC,EAAEE,QAAQ,CAAC,IAAI,CAAC1B,aAAa,CAAC;IAC5D,IAAI,CAACZ,kBAAkB,CAACkC,iBAAiB,CAAC,IAAI,CAACtB,aAAa,EAAE,IAAI,CAACe,eAAe,CAACU,KAAK,CAAC,CAACnB,SAAS,CAAC;MAClGC,IAAI,EAAEC,GAAG,IAAG,CACZ,CAAC;MACDE,KAAK,EAAEC,SAAS,IAAG;QACjBC,KAAK,CAAC,gCAAgC,CAAC;MACzC,CAAC;MACDC,QAAQ,EAAC,MAAI;QACXD,KAAK,CAAC,qBAAqB,CAAC;MAC9B;KACD,CAAC;EACJ;CACD;AArFY1B,0BAA0B,eALtCL,SAAS,CAAC;EACT8C,QAAQ,EAAE,wBAAwB;EAClCC,WAAW,EAAE,qCAAqC;EAClDC,SAAS,EAAE,CAAC,oCAAoC;CACjD,CAAC,GACW3C,0BAA0B,CAqFtC;SArFYA,0BAA0B","names":["Component","transaction","FormControl","FormGroup","Validators","UpdateTransactionComponent","constructor","transactionService","categoryService","router","route","type","required","amount","categoryName","categoryId","date","description","ngOnInit","idtransaction","snapshot","params","loadCategories","loadTransaction","listCategories","subscribe","next","res","categories","error","errorData","alert","complete","actualizarFormulario","formtransaction","id","seeTransaction","console","log","backToList","navigate","updateTransaction","idcategory","get","value","setValue","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\Documentos\\Desarrollo\\pruebas\\Finance Tracker\\Finance-Tracker-frontend\\src\\app\\admin\\components\\update-transaction\\update-transaction.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { transaction } from '../../models/transaction';\nimport { TransactionService } from '../../services/transaction.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { category } from '../../models/category';\nimport { CategoryoService } from '../../services/category.service';\n\n@Component({\n  selector: 'app-update-transaction',\n  templateUrl: './update-transaction.component.html',\n  styleUrls: ['./update-transaction.component.css']\n})\nexport class UpdateTransactionComponent {\n  categories:category[];\n  idtransaction:number;\n  transaction:transaction= new transaction();\n  constructor(private transactionService:TransactionService, private categoryService:CategoryoService, private router:Router, private route:ActivatedRoute){}\n  \n  ngOnInit(): void {\n    this.idtransaction= this.route.snapshot.params[\"id\"];\n    this.loadCategories();\n    this.loadTransaction();\n  }\n\n  loadCategories(){\n    this.categoryService.listCategories().subscribe({\n      next:(res)=>{\n        this.categories=res;\n      },\n      error:(errorData)=>{\n        alert(\"Error al registrar la transaccion\")\n      },\n      complete:()=>{\n        //alert(\"categorias Importadas\");\n       \n      }\n    });\n  }\n\n  \n  formtransaction= new FormGroup({\n      'type': new FormControl(this.transaction.type, Validators.required),\n      'amount': new FormControl(this.transaction.amount, Validators.required),\n      'categoryName': new FormControl(this.transaction.categoryName, Validators.required),\n      'categoryId': new FormControl(this.transaction.categoryId, Validators.required),\n      'date': new FormControl(this.transaction.date, Validators.required),\n      'description': new FormControl(this.transaction.description, Validators.required),\n      'id': new FormControl(0)\n  });\n\n  actualizarFormulario(){\n    this.formtransaction = new FormGroup ({\n      'type': new FormControl(this.transaction.type, Validators.required),\n      'amount': new FormControl(this.transaction.amount, Validators.required),\n      'categoryName': new FormControl(this.transaction.categoryName, Validators.required),\n      'categoryId': new FormControl(this.transaction.categoryId, Validators.required),\n      'date': new FormControl(this.transaction.date, Validators.required),\n      'description': new FormControl(this.transaction.description, Validators.required),\n      'id': new FormControl(this.transaction.id, Validators.required)\n    });\n  }\n  \n  loadTransaction(){\n    this.transactionService.seeTransaction(this.idtransaction).subscribe({\n      next:(res)=>{\n        this.transaction=res;\n        console.log(this.transaction);\n      },\n      error: (errorData)=> {\n        alert(\"Error al carga la informaci贸n de la transacci贸n\");\n      },\n      complete: () => {\n        this.actualizarFormulario();\n        alert(\"Datos cargados\");\n      }\n    });\n  }\n\n  backToList(){\n    this.router.navigate([\"/dashboard/listTransactions\"]);\n  }\n\n  updateTransaction(){\n    var idcategory:any = this.formtransaction.get('categoryName')?.value;\n    this.formtransaction.get('categoryId')?.setValue(idcategory);\n    this.formtransaction.get('id')?.setValue(this.idtransaction);\n    this.transactionService.updateTransaction(this.idtransaction, this.formtransaction.value).subscribe({\n      next:(res)=>{\n      },\n      error:(errorData)=>{\n        alert(\"Error al editar la transacci贸n\")\n      },\n      complete:()=>{\n        alert(\"Transacci贸n editada\");\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}